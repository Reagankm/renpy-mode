* Testing

- [X] more imenu tests

  - [X] defines/defaults in imenu

  - [X] cover everything

- [-] font-locking tests with ert-font-lock

  - [X] setup the tests for emacs 30 only

  - [X] ren'py statements

  - [ ] python blocks

  - [ ] inline python?

- [ ] which-func tests

- [ ] movement tests

- [ ] indentation tests

- [ ] automated testing with multiple emacs versions

* Xref support

- [ ] file-local symbol lookup

- [ ] global symbol lookup

- [ ] symbol reference search

* Completion

- [X] local label completion

- [X] local image completion

- [X] local hide completion

- [ ] local transform completion

- [ ] image directory completion

- [ ] keyword completion

- [ ] global completion

** Further notes

On every project compilation Ren'Py builds a file =game/saves/navigation.json=. The file
contains project meta data as well as lists of symbol definition files/lines grouped by
type: callables, transforms, labels, screens, defines. VSCode uses the file to support
definition search and completion.

It should be easy to watch the file using the file notification facility
(https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Notifications.html) and
maintain a project-wide symbol index on the Emacs side. This simplifies both project-wide
symbol completion and definition lookups.

Key VSCode plugin implementation points:

- https://github.com/renpy/vscode-language-renpy/blob/master/src/completion.ts -
  completion glue code

- https://github.com/renpy/vscode-language-renpy/blob/master/src/navigation-data.ts -
  navigation data as seen by the VSCode plugin

- https://github.com/renpy/vscode-language-renpy/blob/master/src/navigation.ts -
  additional helper classes

* Integration

- [ ] Ren'py launcher integration (see https://github.com/elizagamedev/renpy-mode)

- [ ] renpy lint + flymake

- [ ] renpy compile

- [ ] Suggest for inclusion to Ren'py itself

* Document

- [ ] Existing facilities

- [ ] Launcher integration

- [ ] Contribution

* Publishing

- [ ] rename to renpy-mode (also in Melpa)

- [ ] reannounce the package (once enough features are ready)
